security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider

    role_hierarchy:
        ROLE_ADMIN: [ROLE_VIP, ROLE_USER]
        ROLE_VIP: [ROLE_USER]

    providers:
        #users_in_memory: { memory: null }
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: app_user_provider
            stateless: true
            custom_authenticators: 
                - App\Security\JWTAuthenticator
            entry_point: App\Security\JWTLoginEntryPoint
            #form_login:
            #    login_path: app_login
            #    check_path: app_login
            #    default_target_path: app_user_view__profile
            #    enable_csrf: true
            logout:
                path: app_logout
                target: app_home

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/api/check-user-status, roles: IS_AUTHENTICATED_FULLY}
        - { path: ^/registration/complete, roles: IS_AUTHENTICATED_FULLY}
        - { path: ^/edit/activity, roles: IS_AUTHENTICATED_FULLY}
        - { path: ^/delete/activity, roles: IS_AUTHENTICATED_FULLY}
        - { path: ^/new, roles: IS_AUTHENTICATED_FULLY }
        - { path: ^/actividades, roles: IS_AUTHENTICATED_FULLY }
        - { path: ^/activity/view_personal_activity, roles: IS_AUTHENTICATED_FULLY}
        - { path: ^/user, roles: IS_AUTHENTICATED_FULLY}
        - { path: ^/account, roles: IS_AUTHENTICATED_FULLY}


when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon

parameters: 
    clerk_publishable_key: '%env(NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY)%'